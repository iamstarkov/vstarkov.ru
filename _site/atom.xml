<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Владимир Старков — технический блог</title>
 <link href="http://vstarkov.ru/atom.xml" rel="self"/>
 <link href="http://vstarkov.ru/"/>
 <updated>2012-10-18T01:25:10+06:00</updated>
 <id>http://vstarkov.ru/</id>
 <author>
   <name>Владимир Старков — технический блог</name>
   <email>hello@vstarkov.ru</email>
 </author>

 
 <entry>
   <title>local delete/edit, incoming delete upon update</title>
   <link href="http://tom.preston-werner.com/svn-conflict/"/>
   <updated>2012-10-11T00:00:00+06:00</updated>
   <id>http://tom.preston-werner.com/svn-conflict</id>
   <content type="html">&lt;h1 id='__local_edit_incoming_delete_upon_update_'&gt;Как разрешить «local edit, incoming delete upon update» ?&lt;/h1&gt;

&lt;p&gt;Сегодня столкнулся с такой проблемой, и даже не знал почему она возникла.&lt;br /&gt;Выглядить она примерно так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!     C .htaccess
      &amp;gt;   local edit, incoming delete upon update
!     C foo
      &amp;gt;   local delete, incoming delete upon update
!     C bar
      &amp;gt;   local edit, incoming delete upon update&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Так происходит из-за того, что файл (к примеру .htaccess) был удалён из репозитория, а я не знал об этом и редактировал или даже удалил этот файл локально — именно это и не нравится SVN. Ниже я приведу помогший мне &lt;a href='http://yuechengshao.blogspot.com/2012/01/svn-local-deleteedit-incoming-delete.html'&gt;способ&lt;/a&gt; разрешить конфликт версий (не забывайте про бэкапы).&lt;/p&gt;

&lt;p&gt;В рабочей директории, пересоздайте конфликтный файл:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ touch foo&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Откатите этот файл (это его удалит)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ svn revert foo&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь удалите его&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm foo&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Это победа! Конфликта нет.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ svn st&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id='___'&gt;Другой способ разрешения конфликта&lt;/h2&gt;

&lt;p&gt;&amp;#8217;$ svn resolve &amp;#8211;accept=working PATH&amp;#8217; взято отсюда &lt;a href='http://stackoverflow.com/a/4318394/1057730' title='svn: how to resolve “local edit, incoming delete upon update” message'&gt;svn: how to resolve “local…&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Как синхронизировать 'github pages' c 'master' веткой</title>
   <link href="http://tom.preston-werner.com/ghpages-sync/"/>
   <updated>2012-10-11T00:00:00+06:00</updated>
   <id>http://tom.preston-werner.com/ghpages-sync</id>
   <content type="html">&lt;h1 id='__github_pages_c_master_'&gt;Как синхронизировать &amp;#8216;github pages&amp;#8217; c &amp;#8216;master&amp;#8217; веткой&lt;/h1&gt;

&lt;p&gt;После моего переезда с Tumblr на &lt;a href='http://jekyllrb.com/' title='transform your text into a monster'&gt;Jekyll&lt;/a&gt; стала очевидной проблема двух веток и их синхронизация, так как для хостинга сайта нужно иметь сайт в ветке gh-pages, но в тоже время от master никак не избавишься. И хочется всё таки коммитить посты в master, а gh-pages ветка сама обновлялась и отправлялась на сервер.&lt;/p&gt;

&lt;p&gt;Существуют несколько очень похожих путей решения проблемы: &amp;#8216;git rebase master&amp;#8217; или &amp;#8216;git merge master&amp;#8217;. Первый способ &lt;a href='http://lea.verou.me/2011/10/easily-keep-gh-pages-in-sync-with-master/' title='Easily keep gh-pages in sync with master'&gt;описан&lt;/a&gt; в блоге у Lea Verou. Второй способ по сути заключается в замене &amp;#8216;git rebase master&amp;#8217; на &amp;#8216;git merge master&amp;#8217;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add .
$ git status // посмотреть какие изменения произошли
$ git commit -m &amp;#39;Some descriptive commit message&amp;#39;
$ git push origin master
$ git checkout gh-pages // сменить ветку на gh-pages
$ git rebase master // синхронизировать gh-pages c master (git merge master)
$ git push origin gh-pages // отправить ветку на сервер.
$ git checkout master // вернуться в master&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В этом решении мне не понравилось большое количество строк, выполнении &amp;#8216;git push&amp;#8217; целых два раза для одного коммита. Но самое важное, это я понял механизм работы синхронизации. Ещё одну идею мне подсказал небольшой &lt;a href='http://get.inject.io/n/XxsZ6RE7' title='Git post-commit hook to keep master and gh-pages branch in sync'&gt;пост-коммит хук&lt;/a&gt; упомянутый в комментариях к посту Lea Verou.&lt;/p&gt;

&lt;p&gt;После этого я написал своё элегантное (мне кажется):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add . &amp;amp;&amp;amp; git commit -m &amp;#39;Some descriptive commit message&amp;#39;
$ git checkout gh-pages &amp;amp;&amp;amp; git merge master &amp;amp;&amp;amp; git checkout master &amp;amp;&amp;amp; git push --all&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Первая строчка добавляет в коммитит все модифицированные файлы, и коммитит все файлы — это чаще всего и надо сделать когда добавляешь пост в блог. Вторая строчка объединяет в себе четыре команды (предполагается, что в находитесь в master): смена ветки на gh-pages, объединение с master, возврат в мастер, и отправление обеих веток на сервер.&lt;br /&gt;И также я решил использовать &amp;#8216;git merge master&amp;#8217; так как он созраняет историю коммитов.&lt;/p&gt;

&lt;p&gt;Спасибо интернету за столь элегантное решение проблемы.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Спецификации — версии для печати</title>
   <link href="http://tom.preston-werner.com/specs/"/>
   <updated>2012-07-23T00:00:00+06:00</updated>
   <id>http://tom.preston-werner.com/specs</id>
   <content type="html">&lt;h1 id='____'&gt;Спецификации — версии для печати&lt;/h1&gt;

&lt;p&gt;Однажды я захотел иметь распечатанные версии спецификаций, чтобы читать их когда у меня есть свободное время. После этого я обнаружил &lt;a href='http://webmasters.stackexchange.com'&gt;webmasters.stackexchange&lt;/a&gt; и соответсвующий вопрос про &lt;a href='http://webmasters.stackexchange.com/questions/14676/what-documentation-exists-for-html-css-and-javascript'&gt;спецификации&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Затем я нашёл ссылки на спецификации &lt;a href='http://www.w3.org/TR/CSS21/'&gt;CSS 2.1&lt;/a&gt;, &lt;a href='http://www.w3.org/TR/html401/'&gt;HTML 4&lt;/a&gt;, &lt;a href='http://dev.w3.org/html5/spec/single-page.html'&gt;HTML5 w3&lt;/a&gt; и &lt;a href='http://www.whatwg.org/specs/web-apps/current-work/'&gt;HTML 5 WHATWG&lt;/a&gt;. Оказывается каждая из стабильных спецификаций (CSS 2.1 и HTML 4) имеют несколько версий для печати. &lt;img alt='enter image description here' src='http://i.stack.imgur.com/B2X2Z.png' /&gt;&lt;/p&gt;

&lt;h2 id='___'&gt;Список спецификация для печати&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.w3.org/TR/CSS21/css2.txt'&gt;CSS 2.1 txt&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.w3.org/TR/CSS21/css2.pdf'&gt;CSS 2.1 pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.w3.org/TR/html401/html40.txt'&gt;HTML 4.01 txt&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.w3.org/TR/html401/html40.pdf.gz'&gt;HTML 4.01 gzipped pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.whatwg.org/specs/web-apps/current-work/'&gt;HTML 5 WHATWG single-page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://dev.w3.org/html5/spec/single-page.html'&gt;HTML 5 W3.org single page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='https://docs.google.com/open?id=0Bz1IKTLF1xFPbVg0ZE9nSDl3NzA'&gt;HTML 5 WHATWG (сконвертировано в pdf и загружено в Google Drive)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='https://docs.google.com/open?id=0Bz1IKTLF1xFPUkJ3UEd4TE9iMVE'&gt;HTML 5 W3.org (сконвертировано в pdf и загружено в Google Drive)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>CSS советы и рекомендации</title>
   <link href="http://tom.preston-werner.com/css-guidelines/"/>
   <updated>2012-07-23T00:00:00+06:00</updated>
   <id>http://tom.preston-werner.com/css-guidelines</id>
   <content type="html">&lt;h1 id='css___'&gt;CSS советы и рекомендации&lt;/h1&gt;

&lt;p&gt;В начале каждого CSS файла создаётся и поддерживается список содержимого документа, указывающий на разделы файла стилей. Название разделов имеет префикс из &lt;code&gt;$&lt;/code&gt;, что означает поиск по фразе &lt;code&gt;$[раздел]&lt;/code&gt; вернёт только блок относящийся к секции.&lt;/p&gt;

&lt;h2 id='__'&gt;Синтаксис и форматирование&lt;/h2&gt;

&lt;p&gt;Мы используем многострочную запись для улучшения последующей работы с системой контроля версий (выявление различий сделанных в одной строке — это тихий ужас), мы упорядочиваем логические свойства и селекторы по группам, а &lt;strong&gt;не&lt;/strong&gt; по алфавиту.&lt;/p&gt;

&lt;p&gt;Мы пишем селекторы в нижнем регистре и разделяем слова дефисом: &lt;code&gt;.thisIsBad {}&lt;/code&gt;, &lt;code&gt;.this_is_also_bad {}&lt;/code&gt; but &lt;code&gt;.this-is-correct {}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Всегда заканчивайте строку последнего правила в селекторе символом &amp;#8217;;&amp;#8217;, чтобы избежать возможных конфликтов и синтаксических ошибок во время всего использования документа.&lt;/p&gt;

&lt;p&gt;Для примера предпочитаемого форматирования и структуры CSS просто посмотрите файл &lt;a href='http://github.com/csswizardry/vanilla/blob/master/css/style.css'&gt;github.com/csswizardry/vanilla/&amp;#8230;/style.css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;К прочтению:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://coding.smashingmagazine.com/2011/08/26/writing-css-for-others'&gt;coding.smashingmagazine.com/&amp;#8230;/writing-css-for-others&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://jasoncale.com/articles/5-dont-format-your-css-onto-one-line'&gt;jasoncale.com/&amp;#8230;/5-dont-format-your-css-onto-one-line&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='id124'&gt;Комментарии&lt;/h2&gt;

&lt;p&gt;Комментируйте так много и так часто, насколько вы вообще можете это делать. Если это может понадобиться, то включите в комментарий блок кода разметки, помогающий понять в каком контексте находятся стили.&lt;/p&gt;

&lt;p&gt;Будьте многословны, не стесняйтесь: CSS будет уменьшен при выкладывании на рабочий сервер.&lt;/p&gt;

&lt;h2 id='id125'&gt;Отступы&lt;/h2&gt;

&lt;p&gt;Для каждого уровня вложенности разметки пытайтесь делать соответствующие отступы в стилях. Например:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.nav {}
    .nav li {}
        .nav a {}
        
.promo {}
    .promo p {}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Также пишите вендорные префиксы так, чтобы значения были в одном столбике, то есть:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-webkit-border-radius: 4px;
   -moz-border-radius: 4px;
        border-radius: 4px;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Это позволяет нам сразу увидеть, что все свойства установлены в &lt;code&gt;4px&lt;/code&gt;, но что более важно — так это то, что если наш редактор поддерживает режим редактирования столбцов, то мы можем менять значение сразу во всей колонке значений в один момент.&lt;/p&gt;

&lt;h2 id='_'&gt;Создание компонента&lt;/h2&gt;

&lt;p&gt;При создании нового компонента пишите разметку &lt;strong&gt;до того&lt;/strong&gt;, как напишите хоть одну строчку CSS. Это позволяет увидеть какие свойства наследовались и избежать повторного применения избыточных стилей.&lt;/p&gt;

&lt;h2 id='oocss'&gt;OOCSS&lt;/h2&gt;

&lt;p&gt;При создании компонента старайтесь не повторять себя, также не упускайте из виду принципы OOCSS.&lt;/p&gt;

&lt;p&gt;Вместо того, чтобы плодить множество уникальных компонентов, попытайтесь распознать повторяющиеся шаблоны дизайна и создать из них абстракции; cверстайте эти абстракции, а затем используйте уточняющие классы для расширения их внешнего оформления.&lt;/p&gt;

&lt;p&gt;Если вы вынуждены создать новый компонент, то разделите его на структуру и декоративное оформление; сверстайте структуру используя общие классы, тем самым давая возможность использования структуры компонента в других местах вашего проекта, и затем, используя более специфичные классы, оформите компонент в соответствии с требованиями дизайна.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;К прочтению:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://csswizardry.com/2011/09/the-nav-abstraction'&gt;csswizardry.com/&amp;#8230;/the-nav-abstraction&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code'&gt;stubbornella.org/&amp;#8230;/the-media-object-saves-hundreds-of-lines-of-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='id126'&gt;Раскладка&lt;/h2&gt;

&lt;p&gt;Все компоненты должны быть полностью независимы от ширины; ваши компоненты должны оставаться резиновыми и их ширина должна контролироваться системой модульных сеток.&lt;/p&gt;

&lt;p&gt;Высота &lt;strong&gt;никогда&lt;/strong&gt; не должна назначаться элементам. Высота применяется только на сущности, имевшие размеры &lt;em&gt;до того&lt;/em&gt;, как попали на сайт (например, картинки и спрайты). Никогда не устанавливайте высоту на &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;ul&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, вообще что угодно. Вы можете добить желаемого эффекта с помощью гораздо более гибкого &lt;code&gt;line-height&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Систему модульных сеток следует рассматривать, как структуру сайта. Вы создаёте структуру сайта, а затем наполняете её информацией.&lt;/p&gt;

&lt;p&gt;Вы никогда не должны применять никаких стилей на ячейку сетки, так как они служат только целям разметки. Никогда, ни при каких обстоятельствах не применяйте свойства меняющие поведение &lt;code&gt;box-model&lt;/code&gt; к ячейкам сетки.&lt;/p&gt;

&lt;h2 id='id127'&gt;Размеры&lt;/h2&gt;

&lt;p&gt;Мы используем различные методы для задания размеров интерфейса: проценты, пиксели, &lt;code&gt;ems&lt;/code&gt;, &lt;code&gt;rems&lt;/code&gt; или вообще не задаем единицы измерения.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;К прочтению:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://csswizardry.com/2011/12/measuring-and-sizing-uis-2011-style'&gt;csswizardry.com/&amp;#8230;/measuring-and-sizing-uis-2011-style&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='_'&gt;Размеры текста&lt;/h2&gt;

&lt;p&gt;Мы используем &lt;code&gt;rems&lt;/code&gt; (c запасным решением с помошью пикселей только для старых браузеров). Категорически отказывайтесь от пикселей в &lt;code&gt;font-size&lt;/code&gt; как это делают обычно. Мы определяем &lt;code&gt;line-height&lt;/code&gt; без определения размерностей везде, &lt;strong&gt;кроме&lt;/strong&gt; тех случаев когда позиционируем текст в заранее известной высоте.&lt;/p&gt;

&lt;p&gt;Мы избегаем многоразового определения &lt;code&gt;font-size&lt;/code&gt;; для достижения той же цели мы используем предопределённые размеры шрифтов разбитые по классам. Мы можем переделать оригинальные классы вместо определения &lt;code&gt;font-size&lt;/code&gt; снова и снова.&lt;/p&gt;

&lt;p&gt;Перед тем как задать элементу &lt;code&gt;font-size&lt;/code&gt;, убедитесь что класс с заданным значением ещё не существует.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;К прочтению:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css'&gt;csswizardry.com/&amp;#8230;/pragmatic-practical-font-sizing-in-css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='_'&gt;Сокращённая запись&lt;/h2&gt;

&lt;p&gt;Это может показаться заманчивым использовать правила похожие на &lt;code&gt;background: red;&lt;/code&gt; но делая это, мы на самом деле говорим: «Я хочу, чтобы фоном была не одна картинка скролящуюся, спозиционированную вверх и влево и повторяющуюся по X и Y и чтобы цвет фона был красный». В девяти случаях из десяти это не высовет никаких проблем, но в 10% обязательно доставит достаточно неприятностей, чтобы не использовать сокращенные записи. Вместо этого используйте &lt;code&gt;background-color: red;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Например, ситуация с правилом &lt;code&gt;margin: 0;&lt;/code&gt; — оно ясное и короткое, но черезчур &lt;strong&gt;специфичное&lt;/strong&gt;. Если вы на самом деле хотите сделать отступ снизу от элемента, то гораздо более подходящим будет использовать &lt;code&gt;margin-bottom: 0;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Старайтесь сохранять чёткое представление о свойствах, которые вы устанавливаете и следите за тем, чтобы случайно не сбросить свойства других элементов, используя сокращенную запись. Например, если вы хотите сбросить нижний отступ, то нет никакой необходимости в агрессивном сбрасывании всех отступов с помощью &lt;code&gt;margin: 0;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Сокращённая запись сама по себе хороша, но легко используется неправильно.&lt;/p&gt;

&lt;h2 id='id128'&gt;Селекторы&lt;/h2&gt;

&lt;p&gt;Сохраняйте селекторы эффективными, рациональными и переносимыми.&lt;/p&gt;

&lt;p&gt;Тяжелые, глубоко вложенные селекторы никуда не годятся по ряду причин. Например возьмем &lt;code&gt;.sidebar h3 span {}&lt;/code&gt;. Этот селектор основан на вложении и поэтому нет возможности переместить &lt;code&gt;span&lt;/code&gt; из &lt;code&gt;h3&lt;/code&gt; и из &lt;code&gt;.sidebar&lt;/code&gt; — следовательно, нет возможности обеспечить поддержку стилей на должном уровне.&lt;/p&gt;

&lt;p&gt;Слишком длинные селекторы также вызывают проблемы производительности; чем больше проверок в селекторе (например селекторе &lt;code&gt;.sidebar h3 span&lt;/code&gt; имеет три проверки, а &lt;code&gt;.content ul p a&lt;/code&gt; — четыре), тем больше работы выполняет браузер.&lt;/p&gt;

&lt;p&gt;Старайтесь следить, чтобы ваши стили не зависели от вложенности, где это только возможно, а также что ваши селекторы были короткими и легко воспринимаемыеми.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Запомните:&lt;/strong&gt; Классы на самом деле ни семантичны, ни не семантичны; Они применимы или нет! Перестаньте беспокоиться о «семантике» имён классов и выберите что-нибудь удобное в применении, с расчётом на дальнейшее использование.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;К прочтению:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://speakerdeck.com/u/csswizardry/p/breaking-good-habits'&gt;speakerdeck.com/&amp;#8230;/breaking-good-habits&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://csswizardry.com/2011/09/writing-efficient-css-selectors'&gt;csswizardry.com/&amp;#8230;/writing-efficient-css-selectors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='__'&gt;Слишком специфичные селекторы&lt;/h2&gt;

&lt;p&gt;Гиперспецифичный селектор это один из ряда &lt;code&gt;div.promo&lt;/code&gt;. Скорее всего мы можем достичь тот же самый эффект, используя лишь &lt;code&gt;.promo&lt;/code&gt;. Конечно, иногда мы &lt;em&gt;хотим&lt;/em&gt; определить класс в зависимости от элемента (например, если у вас есть общий класс &lt;code&gt;.error&lt;/code&gt;, который должен выглядеть по разному на разных элементах (например, &lt;code&gt;.error { color: red; }&lt;/code&gt; &lt;code&gt;div.error { padding: 14px; }&lt;/code&gt;)), но по возможности избегайте этого, где это только возможно.&lt;/p&gt;

&lt;p&gt;Другим примером слишком специфичного селектора может быть &lt;code&gt;ul.nav li a {}&lt;/code&gt;. Как описано выше мы сразу можем выкинуть &lt;code&gt;ul&lt;/code&gt;, и так как мы знаем, что &lt;code&gt;.nav&lt;/code&gt; это список, то ссылка будет вложена только в &lt;code&gt;li&lt;/code&gt;, поэтому мы можем сократить &lt;code&gt;ul.nav li a {}&lt;/code&gt; до &lt;code&gt;.nav a&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='id129'&gt;Производительность&lt;/h2&gt;

&lt;p&gt;Хоть это и правда, что браузеры только улучшают свои показатели в скорости рендеринга CSS, «Эффективность» — это то, на чём мы можем быть сфокусированы всегда. Короткие селекторы, неиспользование универсального (&lt;code&gt;* {}&lt;/code&gt;) селектора и избегание больших комбинаций CSS3 селекторов должно помочь обойти проблемы производительности.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;К прочтению:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://csswizardry.com/2011/09/writing-efficient-css-selectors'&gt;csswizardry.com/…/writing-efficient-css-selectors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='______'&gt;Будьте точны, не делайте обобщений и предположений&lt;/h2&gt;

&lt;p&gt;Вместо использования селекторов спускающихся по всему DOM-дереву, чаще удобнее добавить требуемому элементу класс. Давайте рассмотрим конкретный пример.&lt;/p&gt;

&lt;p&gt;Представьте себе промо баннер с классом &lt;code&gt;.promo&lt;/code&gt; с текстом внутри и ссылкой призывающей к действию (призывная, далее по тексту). Если будет только один &lt;code&gt;a&lt;/code&gt; во всем &lt;code&gt;.promo&lt;/code&gt; то можно стилизовать «призывную» ссылку с помощью &lt;code&gt;.promo a {}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Проблема станет очевидна так скоро, как вы добавите простую текстовую ссылку (или любую другую ссылку) в &lt;code&gt;.promo&lt;/code&gt; контейнер; только что добавленная ссылка унаследует стили от «призывной» ссылки в независимости от того, хотите вы этого или нет. В этой ситуации будет лучше добавить точный класс (например &lt;code&gt;.cta&lt;/code&gt; — аббр. от ‘call-to-action’) ссылке, которую вы хотите стилизовать.&lt;/p&gt;

&lt;p&gt;Будьте точны, конкретны; указывайте именно тот элемент, который вам нужен, не его родитель. Никогда не предполагайте, что разметка будет неизменной.&lt;/p&gt;

&lt;h2 id='_____________'&gt;Ключевой селектор никогда (как правило) не должен быть селектором тега или основным классом компонента/абстракции&lt;/h2&gt;

&lt;p&gt;Вы никогда не должны обнаружить себя пишущим селектор, в котором ключевое значение имеет селектор по тегу (например, &lt;code&gt;.header ul {}&lt;/code&gt;) или базовый компонент (например, &lt;code&gt;.header .nav {}&lt;/code&gt;). Так как вы никогда не сможете гарантировать, что будет только один &lt;code&gt;ul&lt;/code&gt; или один &lt;code&gt;.nav&lt;/code&gt; в контейнере &lt;code&gt;.header&lt;/code&gt;, ключевой селектор слишком расплывчатый.&lt;/p&gt;

&lt;p&gt;Будет правильнее задать элементу класс, отвечающий на вопрос, что это за элемент — класс указывающий на него и только на него, итак &lt;code&gt;.header .nav {}&lt;/code&gt; может быть заменен на &lt;code&gt;.site-nav&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Единственное, когда селектор по тегу может быть востребован, это когда ситуация похожа на ту, что описана ниже:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a {
    color:red;
}
.promo {
    background-color: red; 
    color: white;
}
    .promo a {
        color: white;
    }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В данном случае вы &lt;em&gt;знаете&lt;/em&gt;, что каждый &lt;code&gt;a&lt;/code&gt; в &lt;code&gt;.promo&lt;/code&gt; нуждается в пустом правиле, так как в противном случае будет нечитабельным.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Пишите селекторы, указывающие на желаемые элементы, а не на те элементы, что уже оказались в разметке.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id='_id__'&gt;Идентификаторы (ID) и классы&lt;/h2&gt;

&lt;p&gt;Никогда не используйте ID в CSS, &lt;strong&gt;абсолютно никогда&lt;/strong&gt;. Они могут быть использованы в вашей разметке, только для джаваскрипта или обозначения секций документа (fragment-identifiers). Для стилизации используйте только классы. Ни один ID не должен существовать в ваших стилях.&lt;/p&gt;

&lt;p&gt;Классы предоставляют возможность повторного использования (даже если мы не хотим, но всё равно мы можем) и имеют низкую специфичность, что тоже очень удобно.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;К прочтению:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://csswizardry.com/2011/09/when-using-ids-can-be-a-pain-in-the-class'&gt;csswizardry.com/&amp;#8230;/when-using-ids-can-be-a-pain-in-the-class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='id130'&gt;&lt;code&gt;!important&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Допустимо использовать &lt;code&gt;!important&lt;/code&gt; только на вспомогательных классах. Превентивно добавлять &lt;code&gt;!important&lt;/code&gt; удобно и полезно, например если вы знаете, что селектор &lt;code&gt;.error { color: red !important; }&lt;/code&gt; всегда должен нуждаетсяв наибольшем приоритете.&lt;/p&gt;

&lt;p&gt;Не приветствуется использование &lt;code&gt;!important&lt;/code&gt; для исправления ошибок, например, чтобы помочь выбраться себе из ситуации с запутанной специфичностью. Переработайте ваш CSS и старайтесь избегать этих проблем рефакторингом ваших селекторов. Сохраняйте ваши селекторы короткими, откажитесь от ID — и ваша жизнь станет проще.&lt;/p&gt;

&lt;h2 id='____'&gt;Магические числа и абсолютные значения&lt;/h2&gt;

&lt;p&gt;Магическое число — число используемое лишь потому, что «это просто работает». Это порочная практика, так как очень редко она работает по какой-либо реальной причине и обычно достаточно недальновидна, негибка и причина самого числа вероятнее всего забудется. Магические числа устраняют симптомы, но не никак не влиют на проблему.&lt;/p&gt;

&lt;p&gt;Например, использование правила &lt;code&gt;.dropdown-nav li:hover ul { top: 37px; }&lt;/code&gt; для сдвига выпадающего пункта меню вниз при наведении на родителя &lt;code&gt;li&lt;/code&gt; не принесёт ничего хорошего, так как 37px магическое число. 37px работает только потому, что в этом конретном сценарии (конкретный сайт в определённое время) меню оказалось высотой в 37px.&lt;/p&gt;

&lt;p&gt;Вместо этого мы должны использовать &lt;code&gt;.dropdown-nav li:hover ul { top: 100%; }&lt;/code&gt;, что означает без разницы какой высоты будет &lt;code&gt;dropdown-nav&lt;/code&gt; меню, выпадающий пункт меню всегда будет сдвинут на 100% от верхней границы родителя.&lt;/p&gt;

&lt;p&gt;Каждый раз, когда вы жестко задаёте число подумайте дважды; если вы можете избежать этого, используя ключевые слова или синонимы (например, &lt;code&gt;top: 100%&lt;/code&gt; — сдвинуть на 100% от верха) или — даже лучше — не используя никаких элементов измерений, то вы должны избежать использования жестко заданного числа.&lt;/p&gt;

&lt;p&gt;Каждое установленное вами числовое значение, скорее всего было необязательным.&lt;/p&gt;

&lt;h2 id='conditional_stylesheets'&gt;(Conditional stylesheets)&lt;/h2&gt;

&lt;p&gt;Использование файлов стилей по большому счёту можно избежать. Исключением может быть необходимость восполнить недостаточную поддержку (например, PNG с альфа–каналом в IE6).&lt;/p&gt;

&lt;p&gt;Главное правило: вся разметка и &lt;code&gt;box-model&lt;/code&gt; правила могут и &lt;em&gt;будут&lt;/em&gt; работать без дополнительных файлов стилей, если вы отрефакторите ваш CSS. Это означает, что мы никогда не будем рады, если увидим &lt;code&gt;&amp;lt;!--[if IE 7]&amp;gt; element{ margin-left:-9px; } &amp;lt; ![endif]--&amp;gt;&lt;/code&gt; или любой подобный CSS, используемый лишь для того, чтобы «заставить что-то работать правильно».&lt;/p&gt;

&lt;h2 id='id131'&gt;Отладка&lt;/h2&gt;

&lt;p&gt;Если вы столкнулись с проблемой в CSS, то &lt;strong&gt;удаляйте куски кода, до того как начать добавлять правила ещё&lt;/strong&gt; в попытке решить проблему. Проблема кроется в уже написанном CSS, написать ещё больше стилей — не самое верное решение!&lt;/p&gt;

&lt;p&gt;Удаляйте куски разметки и стилей, пока проблема не исчезнет, затем определите в какую часть кода закралась проблема.&lt;/p&gt;

&lt;p&gt;Это бывает достаточно удобно добавить &lt;code&gt;overflow: hidden;&lt;/code&gt; на нужный элемент, чтобы избавиться от результатов кривой вёрстки, но &lt;code&gt;overflow&lt;/code&gt; сам по себе никогда не был проблемой; &lt;strong&gt;Исправляйте проблему, а не симптомы.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id='id132'&gt;Препроцессоры&lt;/h2&gt;

&lt;p&gt;Следуя предыдущим советам, вы возможно обнаружите улетучивающуюся потребность в препроцессорах. Если вы всё ещё хотите их использовать, то учитывая всё, что было написано, используйте препроцессоры как дополнение к правилам, а не как альтернативу им.&lt;/p&gt;

&lt;p&gt;Например, возможность вложенности часто приводит к гипер–специфичным и сильно вложенным селекторам. Давайте рассмотрим наш &lt;code&gt;. nav a {}&lt;/code&gt; пример ещё раз:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.nav {
    li {
        a {}
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Скомпилируется в:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.nav {}
.nav li {}
.nav li a {}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Хотя это и очень маленький пример, но он демонстрирует, что множество встроенных «полезных» фич препроцессоров работают против нас и наших идеалов; &lt;code&gt;.nav li a {}&lt;/code&gt; может (и должно) быть &lt;code&gt;.nav a {}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Также, миксины и похожие них элементы, учат вас запоминать абстракции — что великолепно — но не учат необходимости использовать их правильно; нет никакой необходимости в абстактном миксине, если вы собираетесь использовать его тысячу раз в файле стилей.&lt;/p&gt;

&lt;p&gt;Обязательно изучите все тонкости превосходного vanilla CSS и то, где препроцессор может способствовать их использованию, а не препятствовать или отменять их. Изучите недостатки препроцессоров изнутри и затем соедините лучшие стороны обоих, опустив худшие.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Перевод &lt;a href='https://github.com/csswizardry/CSS-Guidelines'&gt;рекоммендаций&lt;/a&gt; от &lt;a href='http://csswizardry.com/'&gt;@csswizardry&lt;/a&gt;&lt;br /&gt;Присылать исправления можно в &lt;a href='https://github.com/matmuchrapna/CSS-Guidelines'&gt;форк проекта&lt;/a&gt; на гитхабе.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>jsFiddle.net</title>
   <link href="http://tom.preston-werner.com/jsfiddle/"/>
   <updated>2012-07-11T00:00:00+06:00</updated>
   <id>http://tom.preston-werner.com/jsfiddle</id>
   <content type="html">&lt;h1 id='jsfiddlenet'&gt;jsFiddle.net&lt;/h1&gt;

&lt;p&gt;Хочу рассказать про популярный инструмент для демонстрации своих примеров — &lt;a href='http://jsfiddle.net/'&gt;jsFiddle&lt;/a&gt;. Например, им очень удобно пользоваться на таких сайтах как &lt;a href='http://stackoverflow.com/'&gt;Stackoverflow&lt;/a&gt;. Я не раз использовал этот сайт для создания узко–специализированных демо для багов. Также он очень уместно использован для проекта &lt;a href='http://www.highcharts.com/'&gt;Highcharts&lt;/a&gt; в качестве наглядных демонстраций &lt;a href='http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/chart/zoomtype-none/'&gt;различных&lt;/a&gt; &lt;a href='http://jsfiddle.net/gh/get/jquery/1.7.1/highslide-software/highcharts.com/tree/master/samples/highcharts/title/floating/'&gt;опций&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt='jsFiddle' src='http://img716.imageshack.us/img716/1553/df9f77d59cfc47d6bcd6c91.png' /&gt;&lt;/p&gt;

&lt;h2 id='id122'&gt;Использование&lt;/h2&gt;

&lt;p&gt;В главном окне предлагается три области для ввода (HTML, CSS, JavaScript) и одна область для вывода результатов.&lt;br /&gt;В верхнем сайдбаре есть две главные кнопки “Run” и “Save”.&lt;br /&gt;“Run” — заставляет область результатов обновиться. “Save” — обновиться и увеличить номер версии демо на один пункт.&lt;/p&gt;

&lt;h2 id='_'&gt;Настройки демонстрации&lt;/h2&gt;

&lt;p&gt;&lt;img alt='jsFiddle sidebar' src='http://img825.imageshack.us/img825/6839/3291addb04204f7c8e0fb82.png' /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;В первой секции &lt;strong&gt;“Choose framework”&lt;/strong&gt; можно выбрать какой фреймворк (jQuery, MooTools, etc.) использовать и подключать ли &lt;a href='http://necolas.github.com/normalize.css/'&gt;normalize.css&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;В секции &lt;strong&gt;“Add Resources”&lt;/strong&gt; можно подключать сторонние JavaScript библиотеки и CSS файлы.&lt;/li&gt;

&lt;li&gt;Секция &lt;strong&gt;“Info”&lt;/strong&gt; позволяет задавать мета­-теги &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; и выбирать &lt;code&gt;doctype&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='id123'&gt;Кабинет&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;В разделе &lt;strong&gt;Dashboard&lt;/strong&gt; выводятся все сделанные вами fiddl&amp;#8217;ы.&lt;/li&gt;

&lt;li&gt;В раздел &lt;strong&gt;Your Public Fiddles&lt;/strong&gt; попадают только те работы, в которых вы задали &lt;code&gt;title&lt;/code&gt; в панели &lt;strong&gt;Info&lt;/strong&gt; настроек fiddl&amp;#8217;a&lt;br /&gt;&lt;img alt='Your Public Fiddles' src='http://img207.imageshack.us/img207/8963/ddd70990388541d08f13588.png' /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='_'&gt;От себя&lt;/h2&gt;

&lt;p&gt;Советую всем научиться пользоваться этим замечательным ресурсом и показывать свои миниработы с помощью этого проекта. Мне кажется, что это самый лучший проект для этих целей.&lt;/p&gt;</content>
 </entry>
 
 
</feed>